{
    "collab_server" : "",
    "contents" : "#include <RcppArmadillo.h>\n#include <Rmath.h>\n// [[Rcpp::depends(\"RcppArmadillo\")]]\n\n// [[Rcpp::export]]\nconst arma::vec fixxFast(const arma::vec x, const arma::vec w) {\n  const arma::vec temp = x-arma::sum(x%w);\n  double sdx = arma::sum(arma::square(temp)%w);\n  return (temp)/pow(sdx, 0.5);\n}\n\n\n// [[Rcpp::export]]\n\nconst arma::vec mapThetaFast(const arma::vec& v) {\n  int s = v.size();\n  arma::vec temp(s+3);\n  temp(0) = R_NaReal;\n  temp(1) = -std::numeric_limits<double>::infinity();\n  temp(s+2) = std::numeric_limits<double>::infinity();\n  temp.subvec(3,s+1) = arma::cumsum(arma::exp(v.tail(s-1)))+v(0);\n  temp(2) = v(0);\n  return temp;\n}\n// [[Rcpp::export]]\ndouble optFcFast(const arma::vec& par, const arma::vec& x, const arma::vec& w,\n                 const arma::vec& temp1, const arma::vec& temp2, const arma::vec& temp3) {\n\n  double rho = tanh(par[0]);\n  double R = pow((1-rho*rho), 0.5);\n\n  const arma::vec Qp2 = (temp1 - (rho*x))/R;\n  const arma::vec Qp1 = (temp2 - (rho*x))/R;\n  const arma::vec t = (Rcpp::pnorm(Rcpp::NumericVector(Qp2.begin(),Qp2.end())) -\n                       Rcpp::pnorm(Rcpp::NumericVector(Qp1.begin(),Qp1.end())));\n  double res= temp3(0) + arma::sum(w%arma::log(t));\n  if (res == -std::numeric_limits<double>::infinity())\n    res = -std::numeric_limits<double>::max();\n  else\n    res = -res;\n  return res;\n\n}\n\n// [[Rcpp::export]]\n\nconst arma::vec theta(const arma::vec& uM, const arma::vec& M) {\n  arma::vec theta0(uM.size()-1);\n  double s = 0;\n  for(int i=0; i < uM.size()-1; i+=1) {\n    s = arma::mean(arma::conv_to<arma::vec>::from(M<=uM(i)));\n    theta0(i) =  R::qnorm(s, 0.0, 1.0, 1, 0);\n\n  }\n  return theta0;\n}\n\n// [[Rcpp::export]]\nconst arma::vec imapThetaFast2(const arma::vec& theta0) {\n  int n = theta0.size();\n  arma::vec temp(n);\n  temp(0) = theta0(0);\n  temp.subvec(1, n-1) = arma::log(theta0.subvec(1, n-1) - theta0.subvec(0, n-2));\n  return temp;\n}\n// [[Rcpp::export]]\n\narma::field<arma::vec> mainF(const arma::vec x, const arma::vec M, arma::vec  w) {\n  const arma::vec uM = arma::sort(arma::unique(M));\n  const arma::vec theta0 = theta(uM, M);\n\n\n    const arma::vec ftheta0 = mapThetaFast(imapThetaFast2(theta0));\n    const arma::vec temp1 = ftheta0.elem(arma::conv_to<arma::uvec>::from(M)+1);\n    const arma::vec temp2 = ftheta0.elem(arma::conv_to<arma::uvec>::from(M));\n    w = w/arma::sum(w);\n    const arma::vec fx= fixxFast(x, w);\n\n    arma::vec temp3 = Rcpp::dnorm(Rcpp::NumericVector(fx.begin(),fx.end()), 0.0, 1.0, true);\n    arma::vec temp(2);\n    const arma::mat s = arma::cor(x,M);\n    double c = s(0,0);\n    double s1 = arma::sum(w%temp3);\n\n    arma::vec t(1);\n    t.fill(s1);\n    temp(0) = c-3;\n    temp(1) = c+3;\n    arma::field<arma::vec> F(5);\n    F(0) = temp;\n    F(1) = temp1;\n    F(2) = temp2;\n    F(3) = t;\n    F(4) = fx;\n    //double r  = R.parseEval(\"optimize(optFcFast, interval = temp, x,w,temp1, temp2, temp3)\");\n    return F;\n\n}\n\n",
    "created" : 1456952365067.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2692226920",
    "id" : "CD174068",
    "lastKnownWriteTime" : 1456946881,
    "last_content_update" : 1456946881,
    "path" : "~/wCorr/src/helpers.cpp",
    "project_path" : "src/helpers.cpp",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "cpp"
}