{
    "collab_server" : "",
    "contents" : "#include <RcppArmadillo.h>\n#include <Rmath.h>\n#include <Rcpp.h>\n// [[Rcpp::depends(\"RcppArmadillo\")]]\n\n\ntemplate< typename ARMA_VECTOR_TYPE >\nARMA_VECTOR_TYPE vintersection( ARMA_VECTOR_TYPE first, ARMA_VECTOR_TYPE second )\n{\n  std::vector< typename ARMA_VECTOR_TYPE::value_type > output ;\n  std::set_intersection( first.begin(), first.end(), second.begin(), second.end(),\n                         std::back_inserter(output) ) ;\n  std::reverse( output.begin(), output.end() ) ;\n\n  ARMA_VECTOR_TYPE result = arma::conv_to< ARMA_VECTOR_TYPE >::from(output);\n  return result ;\n}\n\n\n// [[Rcpp::export]]\nconst arma::vec imapThetaFast(const arma::vec& theta0) {\n  int n = theta0.size();\n  arma::vec temp(n);\n  temp(0) = theta0(0);\n  temp.subvec(1, n-1) = arma::log(theta0.subvec(1, n-1) - theta0.subvec(0, n-2));\n  return temp;\n}\n\n// [[Rcpp::export]]\nconst arma::vec fscale_cutsFast(const arma::vec& par) {\n  arma::vec temp(par.size());\n  temp(0) = par(0);\n  temp.subvec(1,par.size()-1) = arma::cumsum(arma::exp(par.subvec(1, par.size()-1)))+par(0);\n  return temp;\n}\n\n// [[Rcpp::export]]\nconst arma::mat tableFast(const arma::vec& x, const arma::vec& y, const arma::vec& w) {\n  const arma::vec xUni = arma::sort(arma::unique(x));\n  const arma::vec yUni = arma::sort(arma::unique(y));\n  int xsize = xUni.size();\n  int ysize = yUni.size();\n  arma::mat tab(xsize, ysize);\n  for (int i = 0 ; i < xsize; i+=1) {\n    const arma::uvec x_ind = arma::find(x==xUni(i));\n    for(int j = 0; j < ysize; j+=1) {\n      //const arma::vec y_val = y.elem(x_ind);\n      //const arma::vec temp = arma::conv_to<arma::vec>::from(arma::find(y_val==yUni(j)));\n      //int n = temp.size();\n      const arma::uvec y_ind = arma::find(y==yUni(j));\n      const arma::uvec intersect = vintersection(x_ind, y_ind);\n      tab(i, j) = arma::sum(w.elem(intersect));\n    }\n  }\n  return tab;\n}\n\n// [[Rcpp::export]]\nint discord(const arma::mat& xytab) {\n  //const arma::mat xytab = tableFast(x,y,w);\n  int i = 0;\n  int j = 0;\n  bool foundConcord = false;\n  bool foundDiscord = false;\n  int ncols = xytab.n_cols-1;\n  int nrows = xytab.n_rows-1;\n  while(j < ncols) {\n    if(i<nrows && j<ncols) {\n      const arma::uvec ind1 = arma::linspace<arma::uvec>(i+1, nrows);\n      const arma::uvec ind2 = arma::linspace<arma::uvec>(j+1,ncols);\n      bool temp1 = xytab(i,j)>0;\n      double temp2 = arma::accu(xytab.elem(ind1, ind2));\n      bool temp3 = temp2> 0;\n      if(temp1 && temp3) {\n        foundConcord = true;\n        break;\n      }\n    }\n    if(i>0 && j >0) {\n      const arma::uvec ind1 = arma::linspace<arma::uvec>(0, i-1);\n      const arma::uvec ind2 = arma::linspace<arma::uvec>(0,j-1);\n      bool temp1 = xytab(i,j)>0;\n      double temp2 = arma::accu(xytab.elem(ind1, ind2));\n      bool temp3 = temp2 >0;\n      if(temp1 && temp3 ) {\n        foundConcord = true;\n        break;\n      }\n    }\n    i += 1;\n    if(i>nrows) {\n      i = 1;\n      j = j + 1;\n    }\n  }\n\n  i = 0;\n  j = 0;\n  while(j < ncols) {\n    if(i>0 && j<ncols) {\n\n      const arma::uvec ind1 = arma::linspace<arma::uvec>(0, i-1);\n      const arma::uvec ind2 = arma::linspace<arma::uvec>(j+1,ncols);\n      bool temp1 = xytab(i,j)>0;\n      double temp2 = arma::accu(xytab.elem(ind1, ind2));\n      bool temp3 = temp2 >0;\n      if(temp1 && temp3 ) {\n\n        foundDiscord = true;\n        break;\n      }\n    }\n    if(i<nrows && j > 0) {\n      const arma::uvec ind1 = arma::linspace<arma::uvec>(i+1, nrows);\n      const arma::uvec ind2 = arma::linspace<arma::uvec>(0,j-1);\n      bool temp1 = xytab(i,j)>0;\n      double temp2 = arma::accu(xytab.elem(ind1, ind2));\n      bool temp3 = temp2 > 0;\n      if(temp1 && temp3 ) {\n        foundDiscord = true;\n        break;\n      }\n    }\n    i += 1;\n    if(i>nrows) {\n      i = 1;\n      j = j + 1;\n    }\n  }\n  if(foundDiscord == false)\n    return 1;\n  if(foundConcord == false)\n    return -1;\n  return 0;\n}\n// [[Rcpp::export]]\n\ndouble lnlFast(const arma::mat& xytab, const arma::mat& pm) {\n  arma::mat lpm = arma::log(pm);\n  //lpm.elem(arma::find(lpm, std::numeric_limits<double>::infinity())).fill(arma::datum::log_min);\n  //Rcpp::Rcout << lpm;\n  lpm.elem(arma::find_nonfinite(lpm)).fill(arma::datum::log_min);\n  double sum = arma::accu(xytab % lpm);\n\n  return sum;\n}\n\n// double bNormaL(double prob,  arma::vec& lower,  arma::vec& upper, const arma::vec& mean, const arma::mat& S) {\n//   int nu = 0;\n//   const arma::vec sd = arma::sqrt(S.diag());\n//   double rho = S(0,1)/pow(S(0,0)*S(1,1), 0.5);\n//   lower = (lower - mean)/sd;\n//   upper = (upper-mean)/sd;\n//   arma::vec infin(2);\n//   infin.fill(2);\n//   const arma::vec a = Rcpp::.Fortran(\"smvbvt\", prob, nu, lower, upper, infin, rho,\n//                 PACKAGE = \"mnormt\");\n//   return a(0);\n// }\n",
    "created" : 1456946961084.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "138805193",
    "id" : "50CB2F47",
    "lastKnownWriteTime" : 1456947132,
    "last_content_update" : 1456947132601,
    "path" : "~/wCorr/src/polycHelpers.cpp",
    "project_path" : "src/polycHelpers.cpp",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "cpp"
}